|Command                                         |Effect
|------------------------------------------------|-------------------------------------------------------------------------------
|:[range]delete [x]                              |Delete specified lines [into register x]
|:[range]yank [x]                                |Yank specified lines [into register x]
|:[line]put [x]                                  |Put the text from regitster x after the specified line
|:[range]copy {address}                          |Copy the specified lines to below the line specified by {address}
|:[range]move {address}                          |Move the specified lines to below the line specified by {address}
|:[range]join                                    |Join the specified lines
|:[range]normal {command}                        |Execute Normal mode {commands} on each specified line
|:[range]substitute/{pattern}/{string}/[flags]   |Replace occurrences of {pattern} with {string} on each specified line
|:[range]global/{pattern}/[cmd]                  |Execute the Ex command [cmd] on all specified lines where the {pattern} matches

## We can use the . symbol as an address to represent the current line.
## The % symbol also has a special meaning, it stands for all the lines in the current file
:%p

## The '< symbol is a mark standing for the first line of the visual selection, while '> stands for the last line of the visual selection 

## Use of offset
:.,.+3p

## Copy current line to start of the file
:t0  # t is short for copy, 0 means 'Virtual line above first line of the file'
## yyp uses register, whereas :t. does not

## At Vim's command line, the <C-r><C-w> mapping copies the word under the cursor and inserts it at the command-line prompt.
## We can use this to save ourselves a bit of typing.

## Press q: to see the command window
q/     Open the command-line window with history of searches
q:     Open the command-line window with history of Ex commands
ctrl-f Open from command-line mode to the command-line window

## If we place our cursor on certain line and then invoke !G, Vim opens a prompt with the :.,$! set up for us. 
## We still have to type out the rest of the {filter} command, but it saves a little work.
