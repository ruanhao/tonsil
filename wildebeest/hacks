M-&                 async run shell cmd
M-:	            run a sen3tence of Lisp
M-z	            delete till certain character
M-h	            mark a paragraph
C-M-h	            mark a function defination
C-h C-a             about-emacs info
C-u M-=	            compute line num, character num and word num for a REGION
C-u M-! date        insert current date
M-@ 		    continuously mark words
M-x ping
M-x dig
M-x ifconfig
C-h C               check current file encoding
C-x <RET> f <coding-system>      setup current buffer encoidng info
M-c 	            capitalize the word
M-u		    uppercase the word
M-l 		    lowercase the word
M - M-c		    capitalize the word (reverse)
M - M-u		    uppercase the word (reverse)
M - M-l 	    lowercase the word (reverse)
C-x C-q             toggle Read-Only
C-x ^               higher current window
C-x }               wider current window
C-x -               set current window to a reasonable height
C-x +               set all windows to an equal size

(setq eval-expression-print-length nil) ;; avoid truncate messages in echo area
M-x ielm            ;; Interactive Emacs Lisp Mode

C-M-f     Move forward over a balanced expression
C-M-b     Move backward over a balanced expression
C-M-k     Kill balanced expression forward
C-M-SPC   put the mark at the end of the sexp.
C-M-n     Move forward over a parenthetical group 
C-M-p     Move backward over a parenthetical group 
          ;;And put this to .emacs, it will highlight opening/closing parens:
          (show-paren-mode 1)


;;;;;;;;;;;;;;;;;;;;;;;;;;; useful functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (point)
;; (region-beginning)
;; (region-end)
;; (line-beginning-position)
;; (line-end-position)
;; (point-min)
;; (point-max)
;; 
;; (goto-char 1)
;; (forward-char 1)
;; (backward-char 1)
;; 
;; ;; move cursor to the location of "string"
;; ;; returns the new position
;; (search-forward "string")		; end of "string"
;; (search-backward "string")		; beginning of "string"
;; (re-search-forward "string")
;; (re-search-backward "string")
;; ;; move cursor to the first char that's not "a to z"
;; ;; returns the distance traveled
;; (skip-chars-forward "a-z")
;; (skip-chars-backward "a-z")
;; 
;; (delete-char 1)
;; (delete-region start-pos end-pos)
;; (insert "string")
;; ;; get string from current buffer
;; (buffer-substring-no-properties start-pos end-pos)
;; (capitalize-region start-pos end-pos)
;; 
;; (length "string")
;; (substring "string" start-index end-index)
;; (replace-regexp-in-string regex replacement str)
;; 
;; (buffer-name)
;; (buffer-file-name)
;; ;; switch to other buffer
;; ;; this function does not display the buffer in any window, 
;; ;; so the user cannot necessarily see the buffer. 
;; ;; but Lisp programs will now operate on it. 
;; (set-buffer buffer-name)
;; (save-buffer)
;; (kill-buffer buffer-name)
;; (kill-this-buffer)
;; ;; temporarily sets a buffer as current to work with
;; (with-current-buffer buffer-name
;;   ;; do something here)
;; 
;; ;; insert file into current position
;; (insert-file-contents file-path)
;; ;; append a text block to file
;; (append-to-file start-pos end-pos file-path)
;; ;; get dir path
;; (file-name-directory full-file-path)
;; ;; get filename part
;; (file-name-nondirectory full-file-path)
;; ;; get filename's suffix
;; (file-name-extension file-name)
;; (file-name-sans-extension file-name)

